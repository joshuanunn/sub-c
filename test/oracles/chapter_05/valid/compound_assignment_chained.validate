(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "a.0"),
               (Some (Ast.LiteralInt 250)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "b.1"),
                (Some (Ast.LiteralInt 200)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "c.2"),
                (Some (Ast.LiteralInt 100)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "d.3"),
                (Some (Ast.LiteralInt 75)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "e.4"),
                (Some Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 25)})
                )));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "f.5"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "x.6"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.S
             (Ast.Expression
                (Ast.Assignment ((Ast.Var (Ast.Identifier "x.6")),
                   (Ast.Assignment ((Ast.Var (Ast.Identifier "a.0")),
                      Ast.Binary {op = Ast.Add;
                        left = (Ast.Var (Ast.Identifier "a.0"));
                        right =
                        (Ast.Assignment ((Ast.Var (Ast.Identifier "b.1")),
                           Ast.Binary {op = Ast.Subtract;
                             left = (Ast.Var (Ast.Identifier "b.1"));
                             right =
                             (Ast.Assignment (
                                (Ast.Var (Ast.Identifier "c.2")),
                                Ast.Binary {op = Ast.Multiply;
                                  left = (Ast.Var (Ast.Identifier "c.2"));
                                  right =
                                  (Ast.Assignment (
                                     (Ast.Var (Ast.Identifier "d.3")),
                                     Ast.Binary {op = Ast.Divide;
                                       left =
                                       (Ast.Var (Ast.Identifier "d.3"));
                                       right =
                                       (Ast.Assignment (
                                          (Ast.Var (Ast.Identifier "e.4")),
                                          Ast.Binary {op = Ast.Remainder;
                                            left =
                                            (Ast.Var (Ast.Identifier "e.4"));
                                            right =
                                            (Ast.Assignment (
                                               (Ast.Var
                                                  (Ast.Identifier "f.5")),
                                               Ast.Unary {op = Ast.Negate;
                                                 exp = (Ast.LiteralInt 7)}
                                               ))}
                                          ))}
                                     ))}
                                ))}
                           ))}
                      ))
                   ))));
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.And;
                  left =
                  Ast.Binary {op = Ast.And;
                    left =
                    Ast.Binary {op = Ast.And;
                      left =
                      Ast.Binary {op = Ast.And;
                        left =
                        Ast.Binary {op = Ast.And;
                          left =
                          Ast.Binary {op = Ast.And;
                            left =
                            Ast.Binary {op = Ast.Equal;
                              left = (Ast.Var (Ast.Identifier "a.0"));
                              right = (Ast.LiteralInt 2250)};
                            right =
                            Ast.Binary {op = Ast.Equal;
                              left = (Ast.Var (Ast.Identifier "b.1"));
                              right = (Ast.LiteralInt 2000)}};
                          right =
                          Ast.Binary {op = Ast.Equal;
                            left = (Ast.Var (Ast.Identifier "c.2"));
                            right =
                            Ast.Unary {op = Ast.Negate;
                              exp = (Ast.LiteralInt 1800)}}};
                        right =
                        Ast.Binary {op = Ast.Equal;
                          left = (Ast.Var (Ast.Identifier "d.3"));
                          right =
                          Ast.Unary {op = Ast.Negate;
                            exp = (Ast.LiteralInt 18)}}};
                      right =
                      Ast.Binary {op = Ast.Equal;
                        left = (Ast.Var (Ast.Identifier "e.4"));
                        right =
                        Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 4)}}};
                    right =
                    Ast.Binary {op = Ast.Equal;
                      left = (Ast.Var (Ast.Identifier "f.5"));
                      right =
                      Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 7)}}};
                  right =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "x.6"));
                    right = (Ast.LiteralInt 2250)}}))
          ])})
