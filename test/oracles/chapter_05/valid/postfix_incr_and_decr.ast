(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     [(Ast.D
         (Ast.Declaration ((Ast.Identifier "a"), (Some (Ast.LiteralInt 1)))));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "b"), (Some (Ast.LiteralInt 2)))));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "c"),
             (Some Ast.Unary {op = Ast.PostIncrement;
                     exp = (Ast.Var (Ast.Identifier "a"))})
             )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "d"),
             (Some Ast.Unary {op = Ast.PostDecrement;
                     exp = (Ast.Var (Ast.Identifier "b"))})
             )));
       (Ast.S
          (Ast.Return
             Ast.Binary {op = Ast.And;
               left =
               Ast.Binary {op = Ast.And;
                 left =
                 Ast.Binary {op = Ast.And;
                   left =
                   Ast.Binary {op = Ast.Equal;
                     left = (Ast.Var (Ast.Identifier "a"));
                     right = (Ast.LiteralInt 2)};
                   right =
                   Ast.Binary {op = Ast.Equal;
                     left = (Ast.Var (Ast.Identifier "b"));
                     right = (Ast.LiteralInt 1)}};
                 right =
                 Ast.Binary {op = Ast.Equal;
                   left = (Ast.Var (Ast.Identifier "c"));
                   right = (Ast.LiteralInt 1)}};
               right =
               Ast.Binary {op = Ast.Equal;
                 left = (Ast.Var (Ast.Identifier "d"));
                 right = (Ast.LiteralInt 2)}}))
       ]})
