(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     [(Ast.D
         (Ast.Declaration ((Ast.Identifier "a"), (Some (Ast.LiteralInt 0)))));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "b"), (Some (Ast.LiteralInt 0)))));
       (Ast.S
          (Ast.Expression
             Ast.Unary {op = Ast.PostIncrement;
               exp = (Ast.Var (Ast.Identifier "a"))}));
       (Ast.S
          (Ast.Expression
             Ast.Unary {op = Ast.PreIncrement;
               exp = (Ast.Var (Ast.Identifier "a"))}));
       (Ast.S
          (Ast.Expression
             Ast.Unary {op = Ast.PreIncrement;
               exp = (Ast.Var (Ast.Identifier "a"))}));
       (Ast.S
          (Ast.Expression
             Ast.Unary {op = Ast.PostDecrement;
               exp = (Ast.Var (Ast.Identifier "b"))}));
       (Ast.S
          (Ast.Expression
             Ast.Unary {op = Ast.PreDecrement;
               exp = (Ast.Var (Ast.Identifier "b"))}));
       (Ast.S
          (Ast.Return
             Ast.Binary {op = Ast.And;
               left =
               Ast.Binary {op = Ast.Equal;
                 left = (Ast.Var (Ast.Identifier "a"));
                 right = (Ast.LiteralInt 3)};
               right =
               Ast.Binary {op = Ast.Equal;
                 left = (Ast.Var (Ast.Identifier "b"));
                 right =
                 Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 2)}}}))
       ]})
