(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "a.0"),
               (Some (Ast.LiteralInt 10)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "b.1"),
                (Some (Ast.LiteralInt 12)))));
          (Ast.S
             (Ast.Expression
                (Ast.Assignment ((Ast.Var (Ast.Identifier "a.0")),
                   Ast.Binary {op = Ast.Add;
                     left = (Ast.Var (Ast.Identifier "a.0"));
                     right =
                     Ast.Binary {op = Ast.Or; left = (Ast.LiteralInt 0);
                       right = (Ast.Var (Ast.Identifier "b.1"))}}
                   ))));
          (Ast.S
             (Ast.Expression
                (Ast.Assignment ((Ast.Var (Ast.Identifier "b.1")),
                   Ast.Binary {op = Ast.Multiply;
                     left = (Ast.Var (Ast.Identifier "b.1"));
                     right =
                     Ast.Binary {op = Ast.And;
                       left = (Ast.Var (Ast.Identifier "a.0"));
                       right = (Ast.LiteralInt 0)}}
                   ))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "c.2"),
                (Some (Ast.LiteralInt 14)))));
          (Ast.S
             (Ast.Expression
                (Ast.Assignment ((Ast.Var (Ast.Identifier "c.2")),
                   Ast.Binary {op = Ast.Subtract;
                     left = (Ast.Var (Ast.Identifier "c.2"));
                     right =
                     Ast.Binary {op = Ast.Or;
                       left = (Ast.Var (Ast.Identifier "a.0"));
                       right = (Ast.Var (Ast.Identifier "b.1"))}}
                   ))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "d.3"),
                (Some (Ast.LiteralInt 16)))));
          (Ast.S
             (Ast.Expression
                (Ast.Assignment ((Ast.Var (Ast.Identifier "d.3")),
                   Ast.Binary {op = Ast.Divide;
                     left = (Ast.Var (Ast.Identifier "d.3"));
                     right =
                     Ast.Binary {op = Ast.Or;
                       left = (Ast.Var (Ast.Identifier "c.2"));
                       right = (Ast.Var (Ast.Identifier "d.3"))}}
                   ))));
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.And;
                  left =
                  Ast.Binary {op = Ast.And;
                    left =
                    Ast.Binary {op = Ast.And;
                      left =
                      Ast.Binary {op = Ast.Equal;
                        left = (Ast.Var (Ast.Identifier "a.0"));
                        right = (Ast.LiteralInt 11)};
                      right =
                      Ast.Binary {op = Ast.Equal;
                        left = (Ast.Var (Ast.Identifier "b.1"));
                        right = (Ast.LiteralInt 0)}};
                    right =
                    Ast.Binary {op = Ast.Equal;
                      left = (Ast.Var (Ast.Identifier "c.2"));
                      right = (Ast.LiteralInt 13)}};
                  right =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "d.3"));
                    right = (Ast.LiteralInt 16)}}))
          ])})
