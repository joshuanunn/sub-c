(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     [(Ast.D
         (Ast.Declaration ((Ast.Identifier "a"), (Some (Ast.LiteralInt 250))
            )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "b"), (Some (Ast.LiteralInt 200))
             )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "c"), (Some (Ast.LiteralInt 100))
             )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "d"), (Some (Ast.LiteralInt 75))
             )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "e"), (Some (Ast.LiteralInt 50))
             )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "f"), (Some (Ast.LiteralInt 25))
             )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "g"), (Some (Ast.LiteralInt 10))
             )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "h"), (Some (Ast.LiteralInt 1)))));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "j"), (Some (Ast.LiteralInt 0)))));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "x"), (Some (Ast.LiteralInt 0)))));
       (Ast.S
          (Ast.Expression
             (Ast.Assignment ((Ast.Var (Ast.Identifier "x")),
                (Ast.Assignment ((Ast.Var (Ast.Identifier "a")),
                   Ast.Binary {op = Ast.BwAnd;
                     left = (Ast.Var (Ast.Identifier "a"));
                     right =
                     (Ast.Assignment ((Ast.Var (Ast.Identifier "b")),
                        Ast.Binary {op = Ast.Multiply;
                          left = (Ast.Var (Ast.Identifier "b"));
                          right =
                          (Ast.Assignment ((Ast.Var (Ast.Identifier "c")),
                             Ast.Binary {op = Ast.BwOr;
                               left = (Ast.Var (Ast.Identifier "c"));
                               right =
                               (Ast.Assignment (
                                  (Ast.Var (Ast.Identifier "d")),
                                  (Ast.Assignment (
                                     (Ast.Var (Ast.Identifier "e")),
                                     Ast.Binary {op = Ast.BwXor;
                                       left = (Ast.Var (Ast.Identifier "e"));
                                       right =
                                       (Ast.Assignment (
                                          (Ast.Var (Ast.Identifier "f")),
                                          Ast.Binary {op = Ast.Add;
                                            left =
                                            (Ast.Var (Ast.Identifier "f"));
                                            right =
                                            (Ast.Assignment (
                                               (Ast.Var (Ast.Identifier "g")),
                                               Ast.Binary {
                                                 op = Ast.BwRightShift;
                                                 left =
                                                 (Ast.Var
                                                    (Ast.Identifier "g"));
                                                 right =
                                                 (Ast.Assignment (
                                                    (Ast.Var
                                                       (Ast.Identifier "h")),
                                                    Ast.Binary {
                                                      op = Ast.BwLeftShift;
                                                      left =
                                                      (Ast.Var
                                                         (Ast.Identifier "h"));
                                                      right =
                                                      (Ast.Assignment (
                                                         (Ast.Var
                                                            (Ast.Identifier
                                                               "j")),
                                                         (Ast.LiteralInt 1)))}
                                                    ))}
                                               ))}
                                          ))}
                                     ))
                                  ))}
                             ))}
                        ))}
                   ))
                ))));
       (Ast.S
          (Ast.Return
             Ast.Binary {op = Ast.And;
               left =
               Ast.Binary {op = Ast.And;
                 left =
                 Ast.Binary {op = Ast.And;
                   left =
                   Ast.Binary {op = Ast.And;
                     left =
                     Ast.Binary {op = Ast.And;
                       left =
                       Ast.Binary {op = Ast.And;
                         left =
                         Ast.Binary {op = Ast.And;
                           left =
                           Ast.Binary {op = Ast.And;
                             left =
                             Ast.Binary {op = Ast.And;
                               left =
                               Ast.Binary {op = Ast.Equal;
                                 left = (Ast.Var (Ast.Identifier "a"));
                                 right = (Ast.LiteralInt 40)};
                               right =
                               Ast.Binary {op = Ast.Equal;
                                 left = (Ast.Var (Ast.Identifier "b"));
                                 right = (Ast.LiteralInt 21800)}};
                             right =
                             Ast.Binary {op = Ast.Equal;
                               left = (Ast.Var (Ast.Identifier "c"));
                               right = (Ast.LiteralInt 109)}};
                           right =
                           Ast.Binary {op = Ast.Equal;
                             left = (Ast.Var (Ast.Identifier "d"));
                             right = (Ast.LiteralInt 41)}};
                         right =
                         Ast.Binary {op = Ast.Equal;
                           left = (Ast.Var (Ast.Identifier "e"));
                           right = (Ast.LiteralInt 41)}};
                       right =
                       Ast.Binary {op = Ast.Equal;
                         left = (Ast.Var (Ast.Identifier "f"));
                         right = (Ast.LiteralInt 27)}};
                     right =
                     Ast.Binary {op = Ast.Equal;
                       left = (Ast.Var (Ast.Identifier "g"));
                       right = (Ast.LiteralInt 2)}};
                   right =
                   Ast.Binary {op = Ast.Equal;
                     left = (Ast.Var (Ast.Identifier "h"));
                     right = (Ast.LiteralInt 2)}};
                 right =
                 Ast.Binary {op = Ast.Equal;
                   left = (Ast.Var (Ast.Identifier "j"));
                   right = (Ast.LiteralInt 1)}};
               right =
               Ast.Binary {op = Ast.Equal;
                 left = (Ast.Var (Ast.Identifier "x"));
                 right = (Ast.LiteralInt 40)}}))
       ]})
