(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     [(Ast.D
         (Ast.Declaration ((Ast.Identifier "a"), (Some (Ast.LiteralInt 250))
            )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "b"), (Some (Ast.LiteralInt 200))
             )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "c"), (Some (Ast.LiteralInt 100))
             )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "d"), (Some (Ast.LiteralInt 75))
             )));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "e"),
             (Some Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 25)}))));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "f"), (Some (Ast.LiteralInt 0)))));
       (Ast.D
          (Ast.Declaration ((Ast.Identifier "x"), (Some (Ast.LiteralInt 0)))));
       (Ast.S
          (Ast.Expression
             (Ast.Assignment ((Ast.Var (Ast.Identifier "x")),
                (Ast.Assignment ((Ast.Var (Ast.Identifier "a")),
                   Ast.Binary {op = Ast.Add;
                     left = (Ast.Var (Ast.Identifier "a"));
                     right =
                     (Ast.Assignment ((Ast.Var (Ast.Identifier "b")),
                        Ast.Binary {op = Ast.Subtract;
                          left = (Ast.Var (Ast.Identifier "b"));
                          right =
                          (Ast.Assignment ((Ast.Var (Ast.Identifier "c")),
                             Ast.Binary {op = Ast.Multiply;
                               left = (Ast.Var (Ast.Identifier "c"));
                               right =
                               (Ast.Assignment (
                                  (Ast.Var (Ast.Identifier "d")),
                                  Ast.Binary {op = Ast.Divide;
                                    left = (Ast.Var (Ast.Identifier "d"));
                                    right =
                                    (Ast.Assignment (
                                       (Ast.Var (Ast.Identifier "e")),
                                       Ast.Binary {op = Ast.Remainder;
                                         left =
                                         (Ast.Var (Ast.Identifier "e"));
                                         right =
                                         (Ast.Assignment (
                                            (Ast.Var (Ast.Identifier "f")),
                                            Ast.Unary {op = Ast.Negate;
                                              exp = (Ast.LiteralInt 7)}
                                            ))}
                                       ))}
                                  ))}
                             ))}
                        ))}
                   ))
                ))));
       (Ast.S
          (Ast.Return
             Ast.Binary {op = Ast.And;
               left =
               Ast.Binary {op = Ast.And;
                 left =
                 Ast.Binary {op = Ast.And;
                   left =
                   Ast.Binary {op = Ast.And;
                     left =
                     Ast.Binary {op = Ast.And;
                       left =
                       Ast.Binary {op = Ast.And;
                         left =
                         Ast.Binary {op = Ast.Equal;
                           left = (Ast.Var (Ast.Identifier "a"));
                           right = (Ast.LiteralInt 2250)};
                         right =
                         Ast.Binary {op = Ast.Equal;
                           left = (Ast.Var (Ast.Identifier "b"));
                           right = (Ast.LiteralInt 2000)}};
                       right =
                       Ast.Binary {op = Ast.Equal;
                         left = (Ast.Var (Ast.Identifier "c"));
                         right =
                         Ast.Unary {op = Ast.Negate;
                           exp = (Ast.LiteralInt 1800)}}};
                     right =
                     Ast.Binary {op = Ast.Equal;
                       left = (Ast.Var (Ast.Identifier "d"));
                       right =
                       Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 18)}}};
                   right =
                   Ast.Binary {op = Ast.Equal;
                     left = (Ast.Var (Ast.Identifier "e"));
                     right =
                     Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 4)}}};
                 right =
                 Ast.Binary {op = Ast.Equal;
                   left = (Ast.Var (Ast.Identifier "f"));
                   right =
                   Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 7)}}};
               right =
               Ast.Binary {op = Ast.Equal;
                 left = (Ast.Var (Ast.Identifier "x"));
                 right = (Ast.LiteralInt 2250)}}))
       ]})
