(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "a.0"),
               (Some (Ast.LiteralInt 1)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "b.1"),
                (Some (Ast.LiteralInt 2)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "flag.2"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.S
             (Ast.Return
                Ast.Conditional {
                  cond_exp =
                  Ast.Binary {op = Ast.GreaterThan;
                    left = (Ast.Var (Ast.Identifier "a.0"));
                    right = (Ast.Var (Ast.Identifier "b.1"))};
                  then_exp = (Ast.LiteralInt 5);
                  else_exp =
                  Ast.Conditional {
                    cond_exp = (Ast.Var (Ast.Identifier "flag.2"));
                    then_exp = (Ast.LiteralInt 6);
                    else_exp = (Ast.LiteralInt 7)}}))
          ])})
