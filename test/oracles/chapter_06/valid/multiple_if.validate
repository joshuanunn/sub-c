(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "a.0"),
               (Some (Ast.LiteralInt 0)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "b.1"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.S
             Ast.If {cond_exp = (Ast.Var (Ast.Identifier "a.0"));
               then_smt =
               (Ast.Expression
                  (Ast.Assignment ((Ast.Var (Ast.Identifier "a.0")),
                     (Ast.LiteralInt 2))));
               else_smt =
               (Some (Ast.Expression
                        (Ast.Assignment ((Ast.Var (Ast.Identifier "a.0")),
                           (Ast.LiteralInt 3)))))});
          (Ast.S
             Ast.If {cond_exp = (Ast.Var (Ast.Identifier "b.1"));
               then_smt =
               (Ast.Expression
                  (Ast.Assignment ((Ast.Var (Ast.Identifier "b.1")),
                     (Ast.LiteralInt 4))));
               else_smt =
               (Some (Ast.Expression
                        (Ast.Assignment ((Ast.Var (Ast.Identifier "b.1")),
                           (Ast.LiteralInt 5)))))});
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.Add;
                  left = (Ast.Var (Ast.Identifier "a.0"));
                  right = (Ast.Var (Ast.Identifier "b.1"))}))
          ])})
