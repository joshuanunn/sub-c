(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "x.0"),
               (Some (Ast.LiteralInt 5)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "acc.1"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.S
             Ast.While {
               cond =
               Ast.Binary {op = Ast.GreaterOrEqual;
                 left = (Ast.Var (Ast.Identifier "x.0"));
                 right = (Ast.LiteralInt 0)};
               body =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.D
                         (Ast.Declaration ((Ast.Identifier "i.2"),
                            (Some (Ast.Var (Ast.Identifier "x.0"))))));
                       (Ast.S
                          Ast.While {
                            cond =
                            Ast.Binary {op = Ast.LessOrEqual;
                              left = (Ast.Var (Ast.Identifier "i.2"));
                              right = (Ast.LiteralInt 10)};
                            body =
                            (Ast.Compound
                               (Ast.Block
                                  [(Ast.S
                                      (Ast.Expression
                                         (Ast.Assignment (
                                            (Ast.Var (Ast.Identifier "i.2")),
                                            Ast.Binary {op = Ast.Add;
                                              left =
                                              (Ast.Var (Ast.Identifier "i.2"));
                                              right = (Ast.LiteralInt 1)}
                                            ))));
                                    (Ast.S
                                       Ast.If {
                                         cond_exp =
                                         Ast.Binary {op = Ast.Remainder;
                                           left =
                                           (Ast.Var (Ast.Identifier "i.2"));
                                           right = (Ast.LiteralInt 2)};
                                         then_smt =
                                         (Ast.Continue
                                            (Some (Ast.Identifier "while.2")));
                                         else_smt = None});
                                    (Ast.S
                                       (Ast.Expression
                                          (Ast.Assignment (
                                             (Ast.Var
                                                (Ast.Identifier "acc.1")),
                                             Ast.Binary {op = Ast.Add;
                                               left =
                                               (Ast.Var
                                                  (Ast.Identifier "acc.1"));
                                               right = (Ast.LiteralInt 1)}
                                             ))))
                                    ]));
                            id = (Some (Ast.Identifier "while.2"))});
                       (Ast.S
                          (Ast.Expression
                             (Ast.Assignment (
                                (Ast.Var (Ast.Identifier "x.0")),
                                Ast.Binary {op = Ast.Subtract;
                                  left = (Ast.Var (Ast.Identifier "x.0"));
                                  right = (Ast.LiteralInt 1)}
                                ))))
                       ]));
               id = (Some (Ast.Identifier "while.1"))});
          (Ast.S (Ast.Return (Ast.Var (Ast.Identifier "acc.1"))))])})
