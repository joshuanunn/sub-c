(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "x.0"),
               (Some (Ast.LiteralInt 10)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "y.1"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "z.2"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.S
             Ast.DoWhile {
               body =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.S
                         (Ast.Expression
                            (Ast.Assignment (
                               (Ast.Var (Ast.Identifier "z.2")),
                               Ast.Binary {op = Ast.Add;
                                 left = (Ast.Var (Ast.Identifier "z.2"));
                                 right = (Ast.LiteralInt 1)}
                               ))));
                       (Ast.S
                          Ast.If {
                            cond_exp =
                            Ast.Binary {op = Ast.LessOrEqual;
                              left = (Ast.Var (Ast.Identifier "x.0"));
                              right = (Ast.LiteralInt 0)};
                            then_smt =
                            (Ast.Continue (Some (Ast.Identifier "1")));
                            else_smt = None});
                       (Ast.S
                          (Ast.Expression
                             (Ast.Assignment (
                                (Ast.Var (Ast.Identifier "x.0")),
                                Ast.Binary {op = Ast.Subtract;
                                  left = (Ast.Var (Ast.Identifier "x.0"));
                                  right = (Ast.LiteralInt 1)}
                                ))));
                       (Ast.S
                          Ast.If {
                            cond_exp =
                            Ast.Binary {op = Ast.GreaterOrEqual;
                              left = (Ast.Var (Ast.Identifier "y.1"));
                              right = (Ast.LiteralInt 10)};
                            then_smt =
                            (Ast.Continue (Some (Ast.Identifier "1")));
                            else_smt = None});
                       (Ast.S
                          (Ast.Expression
                             (Ast.Assignment (
                                (Ast.Var (Ast.Identifier "y.1")),
                                Ast.Binary {op = Ast.Add;
                                  left = (Ast.Var (Ast.Identifier "y.1"));
                                  right = (Ast.LiteralInt 1)}
                                ))))
                       ]));
               cond =
               Ast.Binary {op = Ast.NotEqual;
                 left = (Ast.Var (Ast.Identifier "z.2"));
                 right = (Ast.LiteralInt 50)};
               id = (Some (Ast.Identifier "1"))});
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.And;
                  left =
                  Ast.Binary {op = Ast.And;
                    left =
                    Ast.Binary {op = Ast.Equal;
                      left = (Ast.Var (Ast.Identifier "z.2"));
                      right = (Ast.LiteralInt 50)};
                    right =
                    Ast.Binary {op = Ast.Equal;
                      left = (Ast.Var (Ast.Identifier "x.0"));
                      right = (Ast.LiteralInt 0)}};
                  right =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "y.1"));
                    right = (Ast.LiteralInt 10)}}))
          ])})
