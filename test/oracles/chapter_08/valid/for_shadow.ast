(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "shadow"),
               (Some (Ast.LiteralInt 1)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "acc"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.S
             Ast.For {
               init =
               (Ast.InclDecl
                  (Ast.Declaration ((Ast.Identifier "shadow"),
                     (Some (Ast.LiteralInt 0)))));
               cond =
               (Some Ast.Binary {op = Ast.LessThan;
                       left = (Ast.Var (Ast.Identifier "shadow"));
                       right = (Ast.LiteralInt 10)});
               post =
               (Some (Ast.Assignment ((Ast.Var (Ast.Identifier "shadow")),
                        Ast.Binary {op = Ast.Add;
                          left = (Ast.Var (Ast.Identifier "shadow"));
                          right = (Ast.LiteralInt 1)}
                        )));
               body =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.S
                         (Ast.Expression
                            (Ast.Assignment (
                               (Ast.Var (Ast.Identifier "acc")),
                               Ast.Binary {op = Ast.Add;
                                 left = (Ast.Var (Ast.Identifier "acc"));
                                 right = (Ast.Var (Ast.Identifier "shadow"))}
                               ))))
                       ]))});
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.And;
                  left =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "acc"));
                    right = (Ast.LiteralInt 45)};
                  right =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "shadow"));
                    right = (Ast.LiteralInt 1)}}))
          ])})
