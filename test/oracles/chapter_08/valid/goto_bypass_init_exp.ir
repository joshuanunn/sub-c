(Ir.Program
   Ir.Function {name = "main";
     body =
     [Ir.Copy {src = (Ir.Constant 0); dst = (Ir.Var "i.1")};
       Ir.Jump {target = "target"};
       Ir.Copy {src = (Ir.Constant 5); dst = (Ir.Var "i.1")};
       (Ir.Label "start.for.1");
       Ir.Binary {op = Ir.LessThan; src1 = (Ir.Var "i.1");
         src2 = (Ir.Constant 10); dst = (Ir.Var "tmp.0")};
       Ir.JumpIfZero {condition = (Ir.Var "tmp.0"); target = "break.for.1"};
       (Ir.Label "target");
       Ir.Binary {op = Ir.Equal; src1 = (Ir.Var "i.1");
         src2 = (Ir.Constant 0); dst = (Ir.Var "tmp.1")};
       Ir.JumpIfZero {condition = (Ir.Var "tmp.1"); target = "if_end.2"};
       (Ir.Return (Ir.Constant 1)); (Ir.Label "if_end.2");
       (Ir.Label "continue.for.1");
       Ir.Binary {op = Ir.Add; src1 = (Ir.Var "i.1"); src2 = (Ir.Constant 1);
         dst = (Ir.Var "tmp.3")};
       Ir.Copy {src = (Ir.Var "tmp.3"); dst = (Ir.Var "i.1")};
       Ir.Jump {target = "start.for.1"}; (Ir.Label "break.for.1");
       (Ir.Return (Ir.Constant 0)); (Ir.Return (Ir.Constant 0))]})
