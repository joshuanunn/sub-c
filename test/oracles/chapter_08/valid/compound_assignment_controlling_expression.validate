(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "i.0"),
               (Some (Ast.LiteralInt 100)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "sum.1"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.S
             Ast.DoWhile {
               body =
               (Ast.Expression
                  (Ast.Assignment ((Ast.Var (Ast.Identifier "sum.1")),
                     Ast.Binary {op = Ast.Add;
                       left = (Ast.Var (Ast.Identifier "sum.1"));
                       right = (Ast.LiteralInt 2)}
                     )));
               cond =
               (Ast.Assignment ((Ast.Var (Ast.Identifier "i.0")),
                  Ast.Binary {op = Ast.Subtract;
                    left = (Ast.Var (Ast.Identifier "i.0"));
                    right = (Ast.LiteralInt 1)}
                  ));
               id = (Some (Ast.Identifier "1"))});
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.And;
                  left =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "i.0"));
                    right = (Ast.LiteralInt 0)};
                  right =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "sum.1"));
                    right = (Ast.LiteralInt 200)}}))
          ])})
