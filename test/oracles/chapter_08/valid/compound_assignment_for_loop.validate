(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "i.0"),
               (Some (Ast.LiteralInt 1)))));
          (Ast.S
             Ast.For {
               init =
               (Ast.InitExp
                  (Some (Ast.Assignment ((Ast.Var (Ast.Identifier "i.0")),
                           Ast.Binary {op = Ast.Multiply;
                             left = (Ast.Var (Ast.Identifier "i.0"));
                             right =
                             Ast.Unary {op = Ast.Negate;
                               exp = (Ast.LiteralInt 1)}}
                           ))));
               cond =
               (Some Ast.Binary {op = Ast.GreaterOrEqual;
                       left = (Ast.Var (Ast.Identifier "i.0"));
                       right =
                       Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 100)}});
               post =
               (Some (Ast.Assignment ((Ast.Var (Ast.Identifier "i.0")),
                        Ast.Binary {op = Ast.Subtract;
                          left = (Ast.Var (Ast.Identifier "i.0"));
                          right = (Ast.LiteralInt 3)}
                        )));
               body = Ast.Null; id = (Some (Ast.Identifier "for.1"))});
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.Equal;
                  left = (Ast.Var (Ast.Identifier "i.0"));
                  right =
                  Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 103)}}))
          ])})
