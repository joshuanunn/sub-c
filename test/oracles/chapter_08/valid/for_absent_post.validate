(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "a.0"),
               (Some Ast.Unary {op = Ast.Negate;
                       exp = (Ast.LiteralInt 2147483647)})
               )));
          (Ast.S
             Ast.For {init = (Ast.InitExp None);
               cond =
               (Some Ast.Binary {op = Ast.NotEqual;
                       left =
                       Ast.Binary {op = Ast.Remainder;
                         left = (Ast.Var (Ast.Identifier "a.0"));
                         right = (Ast.LiteralInt 5)};
                       right = (Ast.LiteralInt 0)});
               post = None;
               body =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.S
                         (Ast.Expression
                            (Ast.Assignment (
                               (Ast.Var (Ast.Identifier "a.0")),
                               Ast.Binary {op = Ast.Add;
                                 left = (Ast.Var (Ast.Identifier "a.0"));
                                 right = (Ast.LiteralInt 1)}
                               ))))
                       ]));
               id = (Some (Ast.Identifier "1"))});
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.Or;
                  left =
                  Ast.Binary {op = Ast.Remainder;
                    left = (Ast.Var (Ast.Identifier "a.0"));
                    right = (Ast.LiteralInt 5)};
                  right =
                  Ast.Binary {op = Ast.GreaterThan;
                    left = (Ast.Var (Ast.Identifier "a.0"));
                    right = (Ast.LiteralInt 0)}}))
          ])})
