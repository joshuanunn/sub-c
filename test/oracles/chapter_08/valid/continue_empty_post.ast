(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "sum"),
               (Some (Ast.LiteralInt 0)))));
          (Ast.S
             Ast.For {
               init =
               (Ast.InclDecl
                  (Ast.Declaration ((Ast.Identifier "i"),
                     (Some (Ast.LiteralInt 0)))));
               cond =
               (Some Ast.Binary {op = Ast.LessThan;
                       left = (Ast.Var (Ast.Identifier "i"));
                       right = (Ast.LiteralInt 10)});
               post = None;
               body =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.S
                         (Ast.Expression
                            (Ast.Assignment ((Ast.Var (Ast.Identifier "i")),
                               Ast.Binary {op = Ast.Add;
                                 left = (Ast.Var (Ast.Identifier "i"));
                                 right = (Ast.LiteralInt 1)}
                               ))));
                       (Ast.S
                          Ast.If {
                            cond_exp =
                            Ast.Binary {op = Ast.Remainder;
                              left = (Ast.Var (Ast.Identifier "i"));
                              right = (Ast.LiteralInt 2)};
                            then_smt = (Ast.Continue None); else_smt = None});
                       (Ast.S
                          (Ast.Expression
                             (Ast.Assignment (
                                (Ast.Var (Ast.Identifier "sum")),
                                Ast.Binary {op = Ast.Add;
                                  left = (Ast.Var (Ast.Identifier "sum"));
                                  right = (Ast.Var (Ast.Identifier "i"))}
                                ))))
                       ]));
               id = None});
          (Ast.S (Ast.Return (Ast.Var (Ast.Identifier "sum"))))])})
