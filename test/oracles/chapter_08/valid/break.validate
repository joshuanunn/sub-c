(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "a.0"),
               (Some (Ast.LiteralInt 10)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "b.1"),
                (Some (Ast.LiteralInt 20)))));
          (Ast.S
             Ast.For {
               init =
               (Ast.InitExp
                  (Some (Ast.Assignment ((Ast.Var (Ast.Identifier "b.1")),
                           Ast.Unary {op = Ast.Negate;
                             exp = (Ast.LiteralInt 20)}
                           ))));
               cond =
               (Some Ast.Binary {op = Ast.LessThan;
                       left = (Ast.Var (Ast.Identifier "b.1"));
                       right = (Ast.LiteralInt 0)});
               post =
               (Some (Ast.Assignment ((Ast.Var (Ast.Identifier "b.1")),
                        Ast.Binary {op = Ast.Add;
                          left = (Ast.Var (Ast.Identifier "b.1"));
                          right = (Ast.LiteralInt 1)}
                        )));
               body =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.S
                         (Ast.Expression
                            (Ast.Assignment (
                               (Ast.Var (Ast.Identifier "a.0")),
                               Ast.Binary {op = Ast.Subtract;
                                 left = (Ast.Var (Ast.Identifier "a.0"));
                                 right = (Ast.LiteralInt 1)}
                               ))));
                       (Ast.S
                          Ast.If {
                            cond_exp =
                            Ast.Binary {op = Ast.LessOrEqual;
                              left = (Ast.Var (Ast.Identifier "a.0"));
                              right = (Ast.LiteralInt 0)};
                            then_smt =
                            (Ast.Break (Some (Ast.Identifier "for.1")));
                            else_smt = None})
                       ]));
               id = (Some (Ast.Identifier "for.1"))});
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.And;
                  left =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "a.0"));
                    right = (Ast.LiteralInt 0)};
                  right =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "b.1"));
                    right =
                    Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 11)}}}))
          ])})
