(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "i.0"),
               (Some (Ast.LiteralInt 0)))));
          (Ast.S
             Ast.While {cond = (Ast.LiteralInt 1);
               body =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.S
                         (Ast.Expression
                            (Ast.Assignment (
                               (Ast.Var (Ast.Identifier "i.0")),
                               Ast.Binary {op = Ast.Add;
                                 left = (Ast.Var (Ast.Identifier "i.0"));
                                 right = (Ast.LiteralInt 1)}
                               ))));
                       (Ast.S
                          Ast.If {
                            cond_exp =
                            Ast.Binary {op = Ast.GreaterThan;
                              left = (Ast.Var (Ast.Identifier "i.0"));
                              right = (Ast.LiteralInt 10)};
                            then_smt =
                            (Ast.Break (Some (Ast.Identifier "while.1")));
                            else_smt = None})
                       ]));
               id = (Some (Ast.Identifier "while.1"))});
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "j.1"),
                (Some (Ast.LiteralInt 10)))));
          (Ast.S
             Ast.While {cond = (Ast.LiteralInt 1);
               body =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.S
                         (Ast.Expression
                            (Ast.Assignment (
                               (Ast.Var (Ast.Identifier "j.1")),
                               Ast.Binary {op = Ast.Subtract;
                                 left = (Ast.Var (Ast.Identifier "j.1"));
                                 right = (Ast.LiteralInt 1)}
                               ))));
                       (Ast.S
                          Ast.If {
                            cond_exp =
                            Ast.Binary {op = Ast.LessThan;
                              left = (Ast.Var (Ast.Identifier "j.1"));
                              right = (Ast.LiteralInt 0)};
                            then_smt =
                            (Ast.Break (Some (Ast.Identifier "while.2")));
                            else_smt = None})
                       ]));
               id = (Some (Ast.Identifier "while.2"))});
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "result.2"),
                (Some Ast.Binary {op = Ast.And;
                        left =
                        Ast.Binary {op = Ast.Equal;
                          left = (Ast.Var (Ast.Identifier "j.1"));
                          right =
                          Ast.Unary {op = Ast.Negate;
                            exp = (Ast.LiteralInt 1)}};
                        right =
                        Ast.Binary {op = Ast.Equal;
                          left = (Ast.Var (Ast.Identifier "i.0"));
                          right = (Ast.LiteralInt 11)}})
                )));
          (Ast.S (Ast.Return (Ast.Var (Ast.Identifier "result.2"))))])})
