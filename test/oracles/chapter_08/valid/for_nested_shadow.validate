(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "i.0"),
               (Some (Ast.LiteralInt 0)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "j.1"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "k.2"),
                (Some (Ast.LiteralInt 1)))));
          (Ast.S
             Ast.For {
               init =
               (Ast.InclDecl
                  (Ast.Declaration ((Ast.Identifier "i.3"),
                     (Some (Ast.LiteralInt 100)))));
               cond =
               (Some Ast.Binary {op = Ast.GreaterThan;
                       left = (Ast.Var (Ast.Identifier "i.3"));
                       right = (Ast.LiteralInt 0)});
               post =
               (Some (Ast.Assignment ((Ast.Var (Ast.Identifier "i.3")),
                        Ast.Binary {op = Ast.Subtract;
                          left = (Ast.Var (Ast.Identifier "i.3"));
                          right = (Ast.LiteralInt 1)}
                        )));
               body =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.D
                         (Ast.Declaration ((Ast.Identifier "i.4"),
                            (Some (Ast.LiteralInt 1)))));
                       (Ast.D
                          (Ast.Declaration ((Ast.Identifier "j.5"),
                             (Some Ast.Binary {op = Ast.Add;
                                     left = (Ast.Var (Ast.Identifier "i.4"));
                                     right = (Ast.Var (Ast.Identifier "k.2"))})
                             )));
                       (Ast.S
                          (Ast.Expression
                             (Ast.Assignment (
                                (Ast.Var (Ast.Identifier "k.2")),
                                (Ast.Var (Ast.Identifier "j.5"))))))
                       ]));
               id = (Some (Ast.Identifier "1"))});
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.And;
                  left =
                  Ast.Binary {op = Ast.And;
                    left =
                    Ast.Binary {op = Ast.Equal;
                      left = (Ast.Var (Ast.Identifier "k.2"));
                      right = (Ast.LiteralInt 101)};
                    right =
                    Ast.Binary {op = Ast.Equal;
                      left = (Ast.Var (Ast.Identifier "i.0"));
                      right = (Ast.LiteralInt 0)}};
                  right =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "j.1"));
                    right = (Ast.LiteralInt 0)}}))
          ])})
