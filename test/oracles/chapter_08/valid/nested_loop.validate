(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "acc.0"),
               (Some (Ast.LiteralInt 0)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "x.1"),
                (Some (Ast.LiteralInt 100)))));
          (Ast.S
             Ast.While {cond = (Ast.Var (Ast.Identifier "x.1"));
               body =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.D
                         (Ast.Declaration ((Ast.Identifier "y.2"),
                            (Some (Ast.LiteralInt 10)))));
                       (Ast.S
                          (Ast.Expression
                             (Ast.Assignment (
                                (Ast.Var (Ast.Identifier "x.1")),
                                Ast.Binary {op = Ast.Subtract;
                                  left = (Ast.Var (Ast.Identifier "x.1"));
                                  right = (Ast.Var (Ast.Identifier "y.2"))}
                                ))));
                       (Ast.S
                          Ast.While {cond = (Ast.Var (Ast.Identifier "y.2"));
                            body =
                            (Ast.Compound
                               (Ast.Block
                                  [(Ast.S
                                      (Ast.Expression
                                         (Ast.Assignment (
                                            (Ast.Var (Ast.Identifier "acc.0")),
                                            Ast.Binary {op = Ast.Add;
                                              left =
                                              (Ast.Var
                                                 (Ast.Identifier "acc.0"));
                                              right = (Ast.LiteralInt 1)}
                                            ))));
                                    (Ast.S
                                       (Ast.Expression
                                          (Ast.Assignment (
                                             (Ast.Var (Ast.Identifier "y.2")),
                                             Ast.Binary {op = Ast.Subtract;
                                               left =
                                               (Ast.Var
                                                  (Ast.Identifier "y.2"));
                                               right = (Ast.LiteralInt 1)}
                                             ))))
                                    ]));
                            id = (Some (Ast.Identifier "2"))})
                       ]));
               id = (Some (Ast.Identifier "1"))});
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.And;
                  left =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "acc.0"));
                    right = (Ast.LiteralInt 100)};
                  right =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "x.1"));
                    right = (Ast.LiteralInt 0)}}))
          ])})
