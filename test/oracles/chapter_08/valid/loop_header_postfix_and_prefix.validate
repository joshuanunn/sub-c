(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "i.0"),
               (Some (Ast.LiteralInt 100)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "count.1"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.S
             Ast.While {
               cond =
               Ast.Unary {op = Ast.PostDecrement;
                 exp = (Ast.Var (Ast.Identifier "i.0"))};
               body =
               (Ast.Expression
                  Ast.Unary {op = Ast.PostIncrement;
                    exp = (Ast.Var (Ast.Identifier "count.1"))});
               id = (Some (Ast.Identifier "1"))});
          (Ast.S
             Ast.If {
               cond_exp =
               Ast.Binary {op = Ast.NotEqual;
                 left = (Ast.Var (Ast.Identifier "count.1"));
                 right = (Ast.LiteralInt 100)};
               then_smt = (Ast.Return (Ast.LiteralInt 0)); else_smt = None});
          (Ast.S
             (Ast.Expression
                (Ast.Assignment ((Ast.Var (Ast.Identifier "i.0")),
                   (Ast.LiteralInt 100)))));
          (Ast.S
             (Ast.Expression
                (Ast.Assignment ((Ast.Var (Ast.Identifier "count.1")),
                   (Ast.LiteralInt 0)))));
          (Ast.S
             Ast.While {
               cond =
               Ast.Unary {op = Ast.PreDecrement;
                 exp = (Ast.Var (Ast.Identifier "i.0"))};
               body =
               (Ast.Expression
                  Ast.Unary {op = Ast.PostIncrement;
                    exp = (Ast.Var (Ast.Identifier "count.1"))});
               id = (Some (Ast.Identifier "2"))});
          (Ast.S
             Ast.If {
               cond_exp =
               Ast.Binary {op = Ast.NotEqual;
                 left = (Ast.Var (Ast.Identifier "count.1"));
                 right = (Ast.LiteralInt 99)};
               then_smt = (Ast.Return (Ast.LiteralInt 0)); else_smt = None});
          (Ast.S (Ast.Return (Ast.LiteralInt 1)))])})
