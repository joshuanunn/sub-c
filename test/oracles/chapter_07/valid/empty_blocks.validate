(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "ten.0"),
               (Some (Ast.LiteralInt 10)))));
          (Ast.S (Ast.Compound (Ast.Block [])));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "twenty.1"),
                (Some Ast.Binary {op = Ast.Multiply;
                        left = (Ast.LiteralInt 10);
                        right = (Ast.LiteralInt 2)})
                )));
          (Ast.S
             (Ast.Compound
                (Ast.Block [(Ast.S (Ast.Compound (Ast.Block [])))])));
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.Add;
                  left = (Ast.Var (Ast.Identifier "ten.0"));
                  right = (Ast.Var (Ast.Identifier "twenty.1"))}))
          ])})
