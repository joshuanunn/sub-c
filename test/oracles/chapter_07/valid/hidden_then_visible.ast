(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "a"), (Some (Ast.LiteralInt 2))
               )));
          (Ast.D (Ast.Declaration ((Ast.Identifier "b"), None)));
          (Ast.S
             (Ast.Compound
                (Ast.Block
                   [(Ast.S
                       (Ast.Expression
                          (Ast.Assignment ((Ast.Var (Ast.Identifier "a")),
                             Ast.Unary {op = Ast.Negate;
                               exp = (Ast.LiteralInt 4)}
                             ))));
                     (Ast.D
                        (Ast.Declaration ((Ast.Identifier "a"),
                           (Some (Ast.LiteralInt 7)))));
                     (Ast.S
                        (Ast.Expression
                           (Ast.Assignment ((Ast.Var (Ast.Identifier "b")),
                              Ast.Binary {op = Ast.Add;
                                left = (Ast.Var (Ast.Identifier "a"));
                                right = (Ast.LiteralInt 1)}
                              ))))
                     ])));
          (Ast.S
             (Ast.Return
                Ast.Binary {op = Ast.And;
                  left =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "b"));
                    right = (Ast.LiteralInt 8)};
                  right =
                  Ast.Binary {op = Ast.Equal;
                    left = (Ast.Var (Ast.Identifier "a"));
                    right =
                    Ast.Unary {op = Ast.Negate; exp = (Ast.LiteralInt 4)}}}))
          ])})
