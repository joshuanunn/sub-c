(Ast.Program
   Ast.Function {return_type = Ast.KwInt; name = (Ast.Identifier "main");
     body =
     (Ast.Block
        [(Ast.D
            (Ast.Declaration ((Ast.Identifier "a"),
               (Some (Ast.LiteralInt 10)))));
          (Ast.D
             (Ast.Declaration ((Ast.Identifier "b"),
                (Some (Ast.LiteralInt 0)))));
          (Ast.S
             Ast.If {cond_exp = (Ast.Var (Ast.Identifier "a"));
               then_smt =
               (Ast.Compound
                  (Ast.Block
                     [(Ast.D
                         (Ast.Declaration ((Ast.Identifier "a"),
                            (Some (Ast.LiteralInt 1)))));
                       (Ast.S
                          (Ast.Expression
                             (Ast.Assignment ((Ast.Var (Ast.Identifier "b")),
                                (Ast.Var (Ast.Identifier "a"))))));
                       (Ast.S (Ast.Goto (Ast.Identifier "end")))]));
               else_smt = None});
          (Ast.S
             (Ast.Expression
                (Ast.Assignment ((Ast.Var (Ast.Identifier "a")),
                   (Ast.LiteralInt 9)))));
          (Ast.S
             (Ast.Label ((Ast.Identifier "end"),
                (Ast.Return
                   Ast.Binary {op = Ast.And;
                     left =
                     Ast.Binary {op = Ast.Equal;
                       left = (Ast.Var (Ast.Identifier "a"));
                       right = (Ast.LiteralInt 10)};
                     right =
                     Ast.Binary {op = Ast.Equal;
                       left = (Ast.Var (Ast.Identifier "b"));
                       right = (Ast.LiteralInt 1)}})
                )))
          ])})
